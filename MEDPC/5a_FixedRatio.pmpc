\***************************************************
\               File Description Comments
\***************************************************

\ Lever Habituation by Se√°n Martin on 11/07/2019
    \ Brief Description: Fixed Ratio - after X presses on a lever receive a reward. Advancement if inter response time < 2 seconds for 3 trials.
    \ Ending criteria: Ends after 30mins, or after 45 pellets.
    \ Locked pins: Remember to turn off the fan (16) 

\***************************************************
\               Constant Definitions
\***************************************************
\ Experiment variable locations
    ^MaxTimeIdx = 0
    ^MaxPelletIdx = 1
    ^RequiredPelletsIdx = 2
    ^StartingRatioIdx = 3
    ^RatioIdx = 4
    ^RatioIncrementIdx = 5
    ^MaxRatioIdx = 6
    ^InterResponseTimeIdx = 7
    ^InterResponseCountIdx = 8

\ Index holder locations
    ^FeederTimeIdx = 0
    ^NosepokeTimeIdx = 1
    ^RightLeverTimeIdx = 2
    ^WrongRightTimeIdx = 3
    ^WrongNosepokeTimeIdx = 4
    ^RatioSwitchIdx = 5

\ Counter locations
    ^FeederCountIdx = 0
    ^NosepokeCountIdx = 1
    ^RightLeverCountIdx = 2
    ^WrongRightCountIdx = 3
    ^WrongNosepokeCountIdx = 4

\ Inputs
    ^RightLever = 3
    ^Nosepoke = 7

\ Outputs
    ^RightLeverOut = 2
    ^RightLight = 5
    ^RewardLight = 6
    ^HouseLight = 7
    ^Sound = 8
    ^Feeder = 9
    ^FanBox = 16

\***************************************************
\               Variable Descriptions
\***************************************************

\ Aliases
    VAR_ALIAS Maximum Time (min) = A(0) \ Default 30 minutes
    VAR_ALIAS Max Pellets = A(1) \ Default 45
    VAR_ALIAS Pellets To Advance = A(2) \ Default 45
    VAR_ALIAS Starting Ratio = A(3) \ Default 3
    VAR_ALIAS Ratio Increment = A(5) \ Default 3
    VAR_ALIAS Max Ratio = A(6) \ Default 15
    VAR_ALIAS Inter Response Time (secs) = A(7) \ Default 4s
    VAR_ALIAS IRT Trials Required = A(8) \ Default 3

\ Arrays
    \ A = Experiment variables
    \ B = Index holders
    \ C = Counters
    \ D = Data array for feeder drop times
    \ E = Data array for nosepoke times
    \ M = Data array for the time of FR changes
    \ N = Data array for unnecessary right response times
    \ O = Data array for unnecessary nosepoke times
    \ R = Data array for right lever response times

    DIM A = 8
    DIM B = 5
    DIM C = 4
    DIM D = 120 \ Should be large enough to hold max_pellets + 1
    DIM E = 120 \ Should be large enough to hold max_pellets + 1
    DIM M = 10 \ Should be large enough to hold the max FR increments
    DIM N = 100000 \ Could be anything
    DIM O = 100000 \ Could be anything
    DIM R = 1000 \ Should be large enough to hold (max_pellets * max_fr) + 1

\ Counter descriptions
    \ C(0) = Number of Pellets dropped
    \ C(1) = Number of Nosepokes
    \ C(2) = Number of right lever presses
    \ C(3) = Number of unnecessary right lever presses
    \ C(4) = Number of unnecessary nosepokes

\ Z Pulses
    \ Z1 = Screen update pulse
    \ Z2 = Activate Feeder
    \ Z3 = Completed a trial
    \ Z32 = End the session

\ Single Variables
    \ I = Number of consecutive IRTs < threshold
    \ J = Last nosepoke time
    \ K = Count of successive lever presses
    \ L = Last IRT
    \ P = Should pass test (1 = Yes, 0 = No)
    \ T = Elapsed time

\ List of Variables to save at end of trial
    DISKVARS = A, B, C, D, E, M, N, O, P, R, T

\***************************************************
\               Implementation
\***************************************************

S.S.1, \ Control flow

    S1, \ Establish default values and turn on fan
        0.01":
            SET A(^MaxTimeIdx) = 30;
            SET A(^MaxPelletIdx) = 45;
            SET A(^RequiredPelletsIdx) = 45;
            SET A(^StartingRatioIdx) = 3;
            SET A(^RatioIdx) = A(^StartingRatioIdx);
            SET A(^InterResponseTimeIdx) = 4;
            SET A(^InterResponseCountIdx) = 3;
            SET A(^RatioIncrementIdx) = 3;
            SET A(^MaxRatioIdx) = 15;
            SET D(0) = -987.987;
            SET E(0) = -987.987;
            SET M(0) = -987.987;
            SET N(0) = -987.987;
            SET O(0) = -987.987;
            SET R(0) = -987.987;
            LOCKON ^FanBox;
            Z1
        ---> S2

    S2, \ Wait for start signal
        #START:
            ON ^HouseLight;
            SET A(^RatioIdx) = A(^StartingRatioIdx);
            Z1
        ---> S3

    S3, \ Time the session and flag off after Max Time or condition met
        0.01":
            SET T = T + 0.01;
            IF (T-5)/60 >= A(^MaxTimeIdx) [@EndSession, @ContinueSession]
                @End: Z32 ---> S4
                @Cont: IF C(^NosepokeCountIdx) >= A(^MaxPelletIdx) [@EndSession]
                    @End: Z32 ---> S4
            ENDIF

    S4, \ Did the subject pass or fail?
        0.01":
            OFF ^RightLeverOut;
            OFF ^HouseLight;
            OFF ^RightLight;
            IF C(^FeederCountIdx) >= A(^RequiredPelletsIdx) [@Succeed, @Fail]
                @Succ: SET P = 1 ---> S5
                @Fail: SET P = 0 ---> S5

    S5, \ Stop the session
        3":
        ---> STOPABORTFLUSH

\***************************************************
\                Main Program
\***************************************************
S.S.2, \ Experiment logic

    S1, \ Wait for the experiment start
        #START:
            ON ^Sound;
        ---> S2
    
    S2, \ Turn off sound and show response levers
        5":
            OFF ^Sound;
            ON ^RightLeverOut;
            ON ^RightLight;
        ---> S3

    S3, \ Drop pellets and handle FR

        1 #R ^RightLever:
            SET R(B(^RightLeverTimeIdx)) = T;
            ADD B(^RightLeverTimeIdx);
            ADD C(^RightLeverCountIdx);
            SET R(B(^RightLeverTimeIdx)) = -987.987;
            Z1;
            ADD K;
            IF K = A(^RatioIdx) [@Passed]
                @Passed: SET K = 0; Z2; Z3 ---> S4

    S4, \ Pellet has been dropped, detect right presses and nosepoke

        1 #R ^RightLever:
            SET N(B(^WrongRightTimeIdx)) = T;
            ADD B(^WrongRightTimeIdx);
            ADD C(^WrongRightCountIdx);
            SET N(B(^WrongRightTimeIdx)) = -987.987;
            Z1
        ---> SX

        1 #R ^Nosepoke:
            SET E(B(^NosepokeTimeIdx)) = T;
            SET J = T;
            ADD B(^NosepokeTimeIdx);
            ADD C(^NosepokeCountIdx);
            SET E(B(^NosepokeTimeIdx)) = -987.987;
            OFF ^RewardLight;
            Z1
        ---> S3

S.S.5, \ Detect unnecessary nosepokes and record the times

    S1, \Wait for experiment start
        #START:
        ---> S2

    S2, \ Detect unnecessary nosepokes
        1 #R ^Nosepoke:
            SET O(B(^WrongNosepokeTimeIdx)) = T;
            ADD B(^WrongNosepokeTimeIdx);
            ADD C(^WrongNosepokeCountIdx);
            SET O(B(^WrongNosepokeTimeIdx)) = -987.987;
            Z1
        ---> SX

        #Z2:
        ---> S3
    
    S3, \ Detect correct nosepoke
        1 #R ^Nosepoke:
        ---> S2

S.S.6, \ Handle the FR increment logic

    S1, \ Trial finished, get IRT
        #Z3:
            SET L = T - J - 0.01;
            Z1;
            IF L <= A(^InterResponseTimeIdx) [@Fast, @Slow]
                @Fast: ADD I; IF I = A(^InterResponseCountIdx) [] ---> S2
                @Slow: SET I = 0 ---> SX

    S2, \ Enough Successive fast trails occured
        0.01":
            SET I = 0;
            SET A(^RatioIdx) = A(^RatioIdx) + A(^RatioIncrementIdx);
            Z1;
            SET M(B(^RatioSwitchIdx)) = T;
            ADD B(^RatioSwitchIdx);
            SET M(B(^RatioSwitchIdx)) = -987.987;
            IF A(^RatioIdx) = A(^MaxRatioIdx) [@Stay, @Increase]
                @Stay: ---> S3
                @Increase: ---> S1

    S3, \ Can no longer increase!
        #Z3:
            SET L = T - J - 0.01
        ---> SX

S.S.7, \ Drop pellets

    S1, \ Drop the pellet
        #Z2:
            ON ^Feeder;
            ON ^RewardLight;
            SET D(B(^FeederTimeIdx)) = T;
            ADD B(^FeederTimeIdx);
            ADD C(^FeederCountIdx);
            SET D(B(^FeederTimeIdx)) = -987.987;
            Z1
        ---> S2

    S2, \ Turn off the feeder after dropping
        0.5": 
            OFF ^Feeder
        ---> S1

S.S.10, \ Update the display

    S1, \ Wait 9.99 seconds or for a Z-Pulse
        9.99":
        ---> S2

        #Z1:
        ---> S2

    S2, \ Update the screen
        .01":
            SHOW 1, Experiment Time, T/60;
            SHOW 2, Pellets, C(^FeederCountIdx);
            SHOW 3, Current FR, A(^RatioIdx);
            SHOW 4, Correct Nosepokes, C(^NosepokeCountIdx);
            SHOW 5, Correct Rights, C(^RightLeverCountIdx);
            SHOW 6, Current Right Presses, K;
            SHOW 7, Unnecessary Nosepokes, C(^WrongNosepokeCountIdx);
            SHOW 8, Unnecessary Rights, C(^WrongRightCountIdx);
            SHOW 9, Last IRT, L;
            SHOW 10, Successive fast IRTs, I
        ---> S1
